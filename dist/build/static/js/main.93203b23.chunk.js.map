{"version":3,"sources":["shared/components/loader/index.js","layout/index.js","screens/home/index.js","shared/libs/filer/index.js","screens/table/index.js","routes.js","shared/libs/rethinkdb/index.js","app.js","serviceWorker.js","shared/actions.js","shared/store.js","index.js"],"names":["Loader","className","SubMenu","Menu","Sider","Layout","defaultCreateTableData","name","defaultCreateDatabaseData","subscribe","props","useState","loading","setLoading","databases","setDatabases","currentDatabase","setCurrentDatabase","createTableModalVisible","setCreateTableModalVisible","createTableData","setCreateTableData","createTableLoading","setCreateTableLoading","createDatabaseModalVisible","setCreateDatabaseModalVisible","createDatabaseData","setCreateDatabaseData","createDatabaseLoading","setCreateDatabaseLoading","handleCreateDatabase","a","rethink","client","dbCreate","run","connection","dbs_created","message","error","retrieveDatabases","success","console","log","openCreateTableModal","database","handleCreateTable","db","tableCreate","tables_created","dbList","res","toArray","dbs","response","i","length","tableList","tablesRes","tables","push","useEffect","connected","forceReloadKey","openMenus","navigationItems","map","index","toString","key","title","Item","onClick","bind","table","navigate","openKeys","mode","theme","selectable","children","visible","onOk","onCancel","confirmLoading","value","onChange","e","field","target","placeholder","style","marginBottom","proto","csv","objArray","array","JSON","parse","str","line","export","type","headers","items","unshift","filename","fileData","this","stringify","meme","blob","Blob","navigator","msSaveBlob","link","document","createElement","undefined","download","url","URL","createObjectURL","setAttribute","visibility","body","appendChild","click","removeChild","Object","create","defaultEditData","originalField","defaultCreateData","collection","path","fields","defaultCreateDocumentData","id","Option","Select","data","setData","doc","setDoc","editFieldVisible","setEditFieldVisible","editFieldData","setEditFieldData","createFieldVisible","setCreateFieldVisible","createFieldData","setCreateFieldData","createDocumentVisible","setCreateDocumentVisible","createDocumentData","setCreateDocumentData","updateDocumentInData","documents","removeDocumentFromData","splice","selectDocument","closeCreateDocumentModal","removeCreateDocumentDataField","updateCreateDocumentData","openEditFieldModal","includes","_","get","closeEditFieldModal","updateEditFieldData","openCreateFieldModal","closeCreateFieldModal","removeCreateFieldDataField","updateCreateFieldData","handleDeleteTable","t","tableDrop","tables_dropped","forceReload","handleDeleteDocument","delete","deleted","findIndex","d","handleCreateDocument","record","insert","inserted","retrieveTableData","handleEditField","omit","set","filter","replace","replaced","retrieveRecord","handleAddField","update","handleDeleteField","unset","uuid","limit","trackChangesForTable","changes","includeInitial","includeTypes","cursor","each","changeError","handleTableChangeEvent","newData","new_val","old_val","buildDocumentFieldDisplay","subs","val","Array","placement","onConfirm","okText","cancelText","keys","filer","item","active","iterate","obj","parent","span","addonBefore","updateCreateDocumentFieldName","padding","textAlign","width","defaultValue","updateCreateFieldFieldName","routes","_proto","secure","delayedReconnection","reconnectOnDisconnect","events","initialize","configuration","locationParts","window","location","host","split","process","config","port","connect","r","useEvents","rClient","reconnect","self","delaySeconds","setTimeout","onReconnecting","setEvents","onClose","on","onOpen","route","useRoutes","startRethink","rethinkdb","setRethink","Boolean","hostname","match","setTitle","state","Math","floor","random","actions","ReactDOM","render","store","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.93203b23.chunk.js","sourcesContent":["import React from 'react';\n\nimport './loader.scss';\n\nconst Loader = () => {\n  return (\n    <div className=\"loader__container\">\n      <div className=\"loader\" />\n    </div>\n  );\n}\n\nexport default Loader;\n","import React, { useState, useEffect } from 'react';\nimport { subscribe } from 'react-contextual';\nimport { navigate } from 'hookrouter';\nimport { Layout, Menu, Modal, Input, message } from 'antd';\n\n// Local imports\nimport 'antd/dist/antd.css';\nimport './layout.scss';\nimport { Loader } from '../shared/components';\n\n// Sub components\nconst { SubMenu } = Menu;\nconst { Sider } = Layout;\n\nconst defaultCreateTableData = {\n  name: ''\n};\n\nconst defaultCreateDatabaseData = {\n  name: ''\n};\n\nconst ApplicationLayout = props => {\n\n  // Local component state\n  const [ loading, setLoading ] = useState(true);\n  const [ databases, setDatabases ] = useState([]);\n  const [ currentDatabase, setCurrentDatabase ] = useState(false);\n\n  // Table creation state\n  const [ createTableModalVisible, setCreateTableModalVisible] = useState(false);\n  const [ createTableData, setCreateTableData ] = useState(defaultCreateTableData);\n  const [ createTableLoading, setCreateTableLoading ] = useState(false);\n\n  // Database creation state\n  const [ createDatabaseModalVisible, setCreateDatabaseModalVisible ] = useState(false);\n  const [ createDatabaseData, setCreateDatabaseData ] = useState(defaultCreateDatabaseData);\n  const [ createDatabaseLoading, setCreateDatabaseLoading ] = useState(false);\n\n  /**\n   * ======================================\n   * Database Creation Methods\n   * ======================================\n   */\n\n  const openCreateDatabaseModal = () => {\n    setCreateDatabaseModalVisible(true);\n  }\n\n  const closeCreateDatabaseModal = () => {\n    setCreateDatabaseModalVisible(false);\n    setCreateDatabaseData(defaultCreateDatabaseData);\n  }\n\n  const updateCreateDatabaseData = (field, value) => {\n    setCreateDatabaseData({\n      ...createDatabaseData,\n      [field]: value\n    });\n  }\n\n  const handleCreateDatabase = async () => {\n    setCreateDatabaseLoading(true);\n\n    try {\n      // Get the database list\n      const res = await props.rethink.client\n        .dbCreate(createDatabaseData.name)\n        .run(props.rethink.connection);\n\n      if (res.dbs_created === 0) {\n        setCreateDatabaseLoading(false);\n        return message.error('Database could not be created.');\n      }\n\n      await retrieveDatabases();\n      message.success('Database was created.');\n\n      setCreateDatabaseModalVisible(false);\n      setCreateDatabaseData(defaultCreateDatabaseData);\n      setCreateDatabaseLoading(false);\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    setCreateDatabaseLoading(false);\n    message.error('Database could not be created.');\n    return false;\n  }\n\n  /**\n   * ======================================\n   * Table Creation Methods\n   * ======================================\n   */\n\n  const openCreateTableModal = database => {\n    setCurrentDatabase(database);\n    setCreateTableModalVisible(true);\n  }\n\n  const closeCreateTableModal = () => {\n    setCreateTableModalVisible(false);\n    setCurrentDatabase(false);\n    setCreateTableData(defaultCreateTableData);\n  }\n\n  const updateCreateTableData = (field, value) => {\n    setCreateTableData({\n      ...createTableData,\n      [field]: value\n    });\n  }\n\n  const handleCreateTable = async () => {\n    setCreateTableLoading(true);\n\n    try {\n      // Get the database list\n      const res = await props.rethink.client\n        .db(currentDatabase)\n        .tableCreate(createTableData.name)\n        .run(props.rethink.connection);\n\n      if (res.tables_created === 0) {\n        setCreateTableLoading(false);\n        return message.error('Table could not be created.');\n      }\n\n      await retrieveDatabases();\n      message.success('Table was created.');\n\n      setCreateTableModalVisible(false);\n      setCurrentDatabase(false);\n      setCreateTableData(defaultCreateTableData);\n      setCreateTableLoading(false);\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    setCreateTableLoading(false);\n    message.error('Table could not be created.');\n    return false;\n  }\n\n  /**\n   * Testing a query to RethinkDB from here.\n   */\n  const retrieveDatabases = async () => {\n    try {\n\n      // Get the database list\n      const res = await props.rethink\n        .client\n        .dbList()\n        .run(props.rethink.connection);\n\n      // Convert to an array.\n      const dbs = await res.toArray();\n      const response = [];\n\n      /**\n       * Iterate through each database, then grab the tables\n       * for each one. After, push a new object to the response\n       * array with the database name, and it's tables.\n       */\n      for (let i = 0; i < dbs.length; i++) {\n        // Get the table list response\n        const tablesRes = await props.rethink\n          .client\n          .db(dbs[i])\n          .tableList()\n          .run(props.rethink.connection);\n\n        // Convert the data to an array.\n        const tables = await tablesRes.toArray();\n\n        // Push the data to the array.\n        response.push({\n          name: dbs[i],\n          tables\n        })\n      }\n\n      // Update the state.\n      return setDatabases(response);\n    } catch (error) {\n      console.log(error);\n    }\n\n    setDatabases([]);\n  }\n\n  // Watch connection status of Rethink\n  useEffect(() => {\n\n    // If rethink is connected, and databases have not been pulled.\n    if (props.rethink.connected === true) {\n      retrieveDatabases();\n      setLoading(false);\n    }\n\n  }, [props.rethink.connected]);\n\n  // Watch for changes in forceReloadKey\n  useEffect(() => {\n    console.log('Reloading');\n    retrieveDatabases();\n  }, [props.forceReloadKey]);\n\n  // If loading, return a loader component.\n  if (loading) return (<Loader />);\n\n  const openMenus = [];\n\n  // Build the navigation items to be rendered\n  const navigationItems = databases.map((database, index) => {\n    openMenus.push(index.toString());\n    if (database.name !== 'rethinkdb') {\n      return (\n        <SubMenu key={index} title={database.name}>\n          <Menu.Item onClick={openCreateTableModal.bind(this, database.name)} key={database.name + '-add'}>\n            <i className=\"fas fa-plus-circle\"></i>&nbsp;&nbsp; Create Table\n          </Menu.Item>\n          {database.tables.map((table, index) => {\n            return (\n              <Menu.Item\n                onClick={() => navigate(`/database/${database.name}/table/${table}`)}\n                key={index}\n              >\n                <i className=\"fas fa-table\"></i>&nbsp;&nbsp;{table}\n              </Menu.Item>\n            );\n          })}\n        </SubMenu>\n      );\n    }\n  });\n\n  return (\n    <div className=\"root\">\n      <Layout className=\"layout__root\">\n        <Sider className=\"site-layout-background\">\n          <div className=\"logo\">ReQL Admin</div>\n          <Menu openKeys={openMenus} mode=\"inline\" theme=\"dark\" className=\"layout__navigation\" selectable={false}>\n            {navigationItems}\n          </Menu>\n          <div className=\"action-button\" onClick={openCreateDatabaseModal.bind(this)}>\n            <i className=\"fas fa-plus-circle\"></i>&nbsp;&nbsp; Create Database\n          </div>\n        </Sider>\n        <Layout className=\"layout__content\">\n          {props.children}\n        </Layout>\n      </Layout>\n\n      {/** Modal for creating a database. **/}\n      <Modal\n        title=\"Create Database\"\n        visible={createDatabaseModalVisible}\n        onOk={handleCreateDatabase.bind(this)}\n        onCancel={closeCreateDatabaseModal.bind(this)}\n        confirmLoading={createDatabaseLoading}\n      >\n        <Input\n          value={createDatabaseData.name}\n          onChange={e => updateCreateDatabaseData('name', e.target.value)}\n          placeholder=\"Database Name\"\n          style={{marginBottom: 15}}\n        />\n      </Modal>\n\n      {/** Modal for creating a table. **/}\n      <Modal\n        title={`${currentDatabase} / Create Table`}\n        visible={createTableModalVisible}\n        onOk={handleCreateTable.bind(this)}\n        onCancel={closeCreateTableModal.bind(this)}\n        confirmLoading={createTableLoading}\n      >\n        <Input\n          value={createTableData.name}\n          onChange={e => updateCreateTableData('name', e.target.value)}\n          placeholder=\"Table Name\"\n          style={{marginBottom: 15}}\n        />\n      </Modal>\n    </div>\n  );\n}\n\nexport default subscribe()(ApplicationLayout);\n","import React from 'react';\nimport { subscribe } from 'react-contextual';\n\nconst Home = props => {\n  return (<div>Home</div>);\n}\n\nexport default subscribe()(Home);\n","const proto = {\n\n  /**\n   * Takes a object of data and converts it to a CSV formatted\n   * string.\n   */\n  csv(objArray) {\n    let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n    let str = '';\n\n    for (let i = 0; i < array.length; i++) {\n      let line = '';\n      for (let index in array[i]) {\n        if (line != '') line += ',';\n        line += `\\\"${array[i][index]}\\\"`;\n      }\n      str += line + '\\r\\n';\n    }\n\n    return str;\n  },\n\n  /**\n   * Exports a given array of data as a CSV or\n   * JSON file.\n   */\n  export (type = 'csv', headers, items, title) {\n\n    // Align headers\n    if (headers && type === 'csv') items.unshift(headers);\n\n    // Determine the filename\n    let filename = `${(title ? title : 'export')}.${type}`;\n\n    // Set the fileData\n    const fileData = type === 'csv' ? this.csv(JSON.stringify(items)) : JSON.stringify(items);\n\n    // Set the meme type\n    let meme = type === 'csv' ? 'text/csv' : 'application/json';\n\n    // Create the blob of the data\n    const blob = new Blob([fileData], { type: meme + ';charset=utf-8;' });\n\n    // For newer browsers, use msSaveBlob\n    if (navigator.msSaveBlob) return navigator.msSaveBlob(blob, filename);\n\n    // For older browsers, create a link and simulate a click.\n    const link = document.createElement(\"a\");\n\n    if (link.download !== undefined) {\n      var url = URL.createObjectURL(blob);\n      link.setAttribute(\"href\", url);\n      link.setAttribute(\"download\", filename);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n\n};\n\nexport default Object.create(proto);\n","import React, { useState, useEffect } from 'react';\nimport { navigate } from 'hookrouter';\nimport { subscribe } from 'react-contextual';\nimport _ from 'lodash';\nimport filer from '../../shared/libs/filer';\n\n// Ant Design Components\nimport {\n  Modal,\n  Input,\n  Popconfirm,\n  Row,\n  Col,\n  Tooltip,\n  Select,\n  message\n} from 'antd';\n\n// Local Imports\nimport { Loader } from '../../shared/components';\nimport './table.scss';\n\n// Default data objects\nconst defaultEditData = { originalField: '', field: '', value: '' };\n\nconst defaultCreateData = {\n  type: 'field', // or collection\n  collection: '',\n  path: false,\n  fields: [\n    {\n      field: '',\n      value: ''\n    }\n  ]\n};\n\nconst defaultCreateDocumentData = {\n  id: '',\n  fields: [\n    {\n      field: '',\n      value: ''\n    }\n  ]\n};\n\nconst { Option } = Select;\n\nconst DatabaseTable = props => {\n  const { database, table } = props;\n\n  // Loading state\n  const [ loading, setLoading ] = useState(true);\n\n  // Table data\n  const [ data, setData ] = useState([]);\n\n  // Current selected document\n  const [ doc, setDoc ] = useState(false);\n\n  // Edit Field Data\n  const [ editFieldVisible, setEditFieldVisible ] = useState(false);\n  const [ editFieldData, setEditFieldData ] = useState(defaultEditData);\n\n  // Create Field Data\n  const [ createFieldVisible, setCreateFieldVisible ] = useState(false);\n  const [ createFieldData, setCreateFieldData ] = useState(defaultCreateData);\n\n  // Create Document Data\n  const [ createDocumentVisible, setCreateDocumentVisible ] = useState(false);\n  const [ createDocumentData, setCreateDocumentData ] = useState(defaultCreateDocumentData);\n\n  const updateDocumentInData = (key, doc) => {\n    let documents = data;\n    documents[key] = doc;\n    setData([...documents]);\n    setDoc(documents[key]);\n  }\n\n  const removeDocumentFromData = key => {\n    let documents = data;\n    documents.splice(key, 1);\n    setData([...documents]);\n    setDoc(false);\n  }\n\n  /**\n   * Selects the current document to be shown.\n   */\n  const selectDocument = key => {\n    setDoc(data[key]);\n  }\n\n  /**\n   * Create document data methods. Handles opening modals,\n   * updating data objects, etc.\n   */\n  const openCreateDocumentModal = () => {\n    setCreateDocumentVisible(true);\n  }\n\n  const closeCreateDocumentModal = () => {\n    setCreateDocumentData(defaultCreateDocumentData);\n    setCreateDocumentVisible(false);\n  }\n\n  const removeCreateDocumentDataField = key => {\n    let fields = createDocumentData.fields;\n    fields.splice(key, 1);\n    setCreateDocumentData({\n      ...editFieldData,\n      fields: [ ...fields ]\n    });\n  }\n\n  const addCreateDocumentDataField = () => {\n    let fields = createDocumentData.fields;\n\n    fields.push({\n      field: '',\n      value: ''\n    });\n\n    setCreateDocumentData({\n      ...createDocumentData,\n      fields: [ ...fields ]\n    });\n  }\n\n  const updateCreateDocumentFieldName = (i, value) => {\n    let fields = createDocumentData.fields;\n    fields[i].field = value;\n\n    setCreateDocumentData({\n      ...createDocumentData,\n      fields: [ ...fields ]\n    });\n  }\n\n  const updateCreateDocumentData = (field, value) => {\n    if (field === 'id') {\n      setCreateDocumentData({\n        ...createDocumentData,\n        id: value\n      });\n    } else {\n      let fields = createDocumentData.fields;\n      fields[field].value = value;\n\n      setCreateDocumentData({\n        ...createDocumentData,\n        fields: [ ...fields ]\n      });\n    }\n  }\n\n  /**\n   * Edit Field data methods. Handles opening modals,\n   * updating data objects, etc.\n   */\n  const openEditFieldModal = key => {\n    setEditFieldData({\n      originalField: key,\n      field: key,\n      value: (key.includes('.') ? _.get(doc, key) : doc[key])\n    });\n    setEditFieldVisible(true);\n  }\n\n  const closeEditFieldModal = () => {\n    setEditFieldData(defaultEditData);\n    setEditFieldVisible(false);\n  }\n\n  const updateEditFieldData = (field, value) => {\n    setEditFieldData({\n      ...editFieldData,\n      [field]: value\n    });\n  }\n\n  /**\n   * Create Field data methods. Handles opening modals,\n   * updating data objects, etc.\n   */\n  const openCreateFieldModal = (field = false) => {\n    setCreateFieldData({\n      ...createFieldData,\n      path: (typeof field === 'string' ? field : false)\n    });\n\n    setCreateFieldVisible(true);\n  }\n\n  const closeCreateFieldModal = () => {\n    setCreateFieldData(defaultCreateData);\n    setCreateFieldVisible(false);\n  }\n\n  const removeCreateFieldDataField = key => {\n    let fields = createFieldData.fields;\n    fields.splice(key, 1);\n\n    setCreateFieldData({\n      ...createFieldData,\n      fields: [ ...fields ]\n    });\n  }\n\n  const addCreateFieldDataField = () => {\n    let fields = createFieldData.fields;\n\n    fields.push({\n      field: '',\n      value: ''\n    });\n\n    setCreateFieldData({\n      ...createFieldData,\n      fields: [ ...fields ]\n    });\n  }\n\n  const updateCreateFieldFieldName = (i, value) => {\n    let fields = createFieldData.fields;\n    fields[i].field = value;\n\n    setCreateFieldData({\n      ...createFieldData,\n      fields: [ ...fields ]\n    });\n  }\n\n  const updateCreateFieldData = (field, value) => {\n    if (field === 'type') {\n      if (value === 'field') {\n        setCreateFieldData({\n          ...createFieldData,\n          type: value,\n          fields: [\n            {\n              field: '',\n              value: ''\n            }\n          ]\n        });\n      } else {\n        setCreateFieldData({\n          ...createFieldData,\n          type: value\n        });\n      }\n    } else if (field === 'collection') {\n      setCreateFieldData({\n        ...createFieldData,\n        collection: value\n      });\n    } else {\n      let fields = createFieldData.fields;\n      fields[field].value = value;\n\n      setCreateFieldData({\n        ...createFieldData,\n        fields: [ ...fields ]\n      });\n    }\n  }\n\n  /**\n   * Below are the methods for handling specific actions\n   * like editing fields, or creating documents as well\n   * as deleting something.\n   *\n   * Naming convention should be that of\n   * handle<ActionName> for quick reference.\n   */\n\n  /**\n   * Handles the editing of a field for the current\n   * selected document.\n   */\n  const handleDeleteTable = async t => {\n    try {\n      const res = await props.rethink.client\n        .db(database)\n        .tableDrop(t)\n        .run(props.rethink.connection);\n\n      if (res.tables_dropped === 0) return message.error('Error removing table');\n\n      props.forceReload();\n      navigate('/');\n      message.success('Table was removed');\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    message.error('There was an error');\n    return false;\n  }\n\n  /**\n   * Handles the editing of a field for the current\n   * selected document.\n   */\n  const handleDeleteDocument = async () => {\n    try {\n      const res = await props.rethink.client\n        .db(database)\n        .table(table)\n        .get(doc.id)\n        .delete()\n        .run(props.rethink.connection);\n\n      if (res.deleted === 0) return message.error('Unable to remove document.');\n\n      const index = data.findIndex(d => d.id === doc.id);\n      if (index === undefined || index === null || index === false) {\n        console.log('Could not determine index.');\n        return false;\n      }\n\n      removeDocumentFromData(index);\n\n      message.success('Document was removed');\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    message.error('There was an error');\n    return false;\n  }\n\n  /**\n   * Handles the editing of a field for the current\n   * selected document.\n   */\n  const handleCreateDocument = async () => {\n    // Set data to an easier variable name\n    let data = createDocumentData;\n\n    // Set record object\n    let record = {};\n\n    // Validation\n    for (let i = 0; i < data.fields.length; i++) {\n      if (!data.fields[i].field) return message.error('Field name must have a value.');\n      record[data.fields[i].field] = data.fields[i].value;\n    }\n\n    // If there is an id, set it.\n    if (data.id) record.id = data.id;\n\n    try {\n      const res = await props.rethink.client\n        .db(database)\n        .table(table)\n        .insert(record)\n        .run(props.rethink.connection);\n\n      // If nothing was inserted, return an error.\n      if (res.inserted === 0) return message.error('Unable to create document.');\n\n      // Retrieve table data again.\n      await retrieveTableData();\n\n      // Close the modal.\n      closeCreateDocumentModal();\n      message.success('Document was created');\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    message.error('There was an error');\n    return false;\n  }\n\n  /**\n   * Handles the editing of a field for the current\n   * selected document.\n   */\n  const handleEditField = async () => {\n    let field = editFieldData.field;\n    let d = doc;\n\n    // Compare fields, see if the field changed.\n    if (editFieldData.originalField !== editFieldData.field) {\n      d = _.omit(d, editFieldData.originalField);\n    }\n\n    if (field.includes('.')) d = _.set(d, field, editFieldData.value);\n    else d[field] = editFieldData.value;\n\n    try {\n      const res = await props.rethink.client\n        .db(database)\n        .table(table)\n        .filter({ id: doc.id })\n        .replace(d)\n        .run(props.rethink.connection);\n\n      if (res.replaced === 0) return message.error('Unable to update field.');\n\n      const index = data.findIndex(d => d.id === doc.id);\n      if (index === undefined || index === null || index === false) {\n        console.log('Could not determine index.');\n        return false;\n      }\n\n      const document = await retrieveRecord(doc.id);\n      updateDocumentInData(index, document);\n\n      closeEditFieldModal();\n      message.success('Field was updated');\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    message.error('There was an error');\n    return false;\n  }\n\n  /**\n   * Handles the creation of a field for the current\n   * selected document.\n   */\n  const handleAddField = async () => {\n    let d = doc;\n\n    /**\n     * If it's a collection, set the collection\n     * key, then add all fields to it.\n     */\n    if (createFieldData.type === 'collection') {\n      let path = (createFieldData.path ? createFieldData.path + '.' : '') + createFieldData.collection;\n      for (let i = 0; i < createFieldData.fields.length; i++) {\n        d = _.set(d, `${path}.${createFieldData.fields[i].field}`, createFieldData.fields[i].value);\n      }\n    } else {\n      let path = (createFieldData.path ? createFieldData.path + '.' : '');\n\n      if (createFieldData.fields.length)\n        d = _.set(d, `${path}${createFieldData.fields[0].field}`, createFieldData.fields[0].value);\n    }\n\n    try {\n      const res = await props.rethink.client\n        .db(database)\n        .table(table)\n        .filter({ id: doc.id })\n        .update(d)\n        .run(props.rethink.connection);\n\n      if (res.replaced === 0) return message.error('Unable to add field.');\n\n      const index = data.findIndex(d => d.id === doc.id);\n      if (index === undefined || index === null || index === false) {\n        console.log('Could not determine index.');\n        return false;\n      }\n\n      const document = await retrieveRecord(doc.id);\n      updateDocumentInData(index, document);\n\n      closeCreateFieldModal();\n      message.success('Field was added');\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    message.error('There was an error');\n    return false;\n  }\n\n  /**\n   * Handles the deletion of a field for the current\n   * selected document.\n   */\n  const handleDeleteField = async field => {\n\n    // Get document and unset\n    let d = doc;\n    _.unset(d, field);\n\n    try {\n      const res = await props.rethink.client\n        .db(database)\n        .table(table)\n        .filter({ id: doc.id })\n        .replace({ ...d })\n        .run(props.rethink.connection);\n\n      if (res.replaced === 0) return message.error('Unable to remove field.');\n\n      const index = data.findIndex(d => d.id === doc.id);\n      if (index === undefined || index === null || index === false) {\n        console.log('Could not determine index.');\n        return false;\n      }\n\n      const document = await retrieveRecord(doc.id);\n      updateDocumentInData(index, document);\n\n      message.success('Field was removed');\n      return true;\n    } catch (error) {\n      console.log(error);\n    }\n\n    message.error('There was an error');\n    return false;\n  }\n\n  /**\n   * Retrieves data for a specific record.\n   */\n  const retrieveRecord = async uuid => {\n    try {\n      const res = await props.rethink.client\n        .db(database)\n        .table(table)\n        .get(uuid)\n        .run(props.rethink.connection);\n\n      if (res === null) return false;\n      return res;\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n  }\n\n  /**\n   * Retrieves data for a table, and sets it\n   * to local state.\n   */\n  const retrieveTableData = async () => {\n    try {\n\n      // Get the database list\n      const res = await props.rethink.client\n        .db(database)\n        .table(table)\n        .limit(1000)\n        .run(props.rethink.connection);\n\n      // Convert to an array.\n      const data = await res.toArray();\n      setData(data);\n\n      trackChangesForTable();\n      return setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n\n    setData([]);\n  }\n\n  const trackChangesForTable = async () => {\n    const self = this;\n\n    try {\n\n      // Get the database list\n      await props.rethink.client\n        .db(database)\n        .table(table)\n        .changes({ includeInitial: true, includeTypes: true })\n        .run(props.rethink.connection, (error, cursor) => {\n          if (error) return console.log(error);\n\n          cursor.each((changeError, doc) => {\n            handleTableChangeEvent(doc);\n          });\n        });\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleTableChangeEvent = async (doc) => {\n    if (doc.type === 'change') {\n      const newData = doc.new_val;\n      const oldData = doc.old_val;\n\n      const index = data.findIndex(d => d.id === doc.id);\n      if (index === undefined || index === null || index === false) {\n        console.log('Could not determine index.');\n        return false;\n      }\n\n      updateDocumentInData(index, newData);\n    }\n\n    if (doc.type === 'add') {\n      // retrieveTableData();\n    }\n\n    if (doc.type === 'remove') {\n      // retrieveTableData();\n    }\n  }\n\n  /**\n   * Infinite iteration for documents that have sub-collections.\n   */\n  const iterate = (obj, parent = '') => {\n    return Object.keys(obj).map((key, index) => {\n      let field = [];\n      let subs = [];\n\n      // If it's an object, build the subs.\n      if (typeof obj[key] === 'object') {\n        subs = iterate(obj[key], (parent ? `${parent}.${key}` : key));\n\n        field = buildDocumentFieldDisplay(\n          obj,\n          (parent ? `${parent}.${key}` : key),\n          '',\n          index,\n          subs\n        );\n      } else {\n        field = buildDocumentFieldDisplay(\n          obj,\n          (parent ? `${parent}.${key}` : key),\n          obj[key],\n          index\n        );\n      }\n\n      return (<>{field}</>);\n    })\n  }\n\n  /**\n   * Builds the field display for a document.\n   */\n  const buildDocumentFieldDisplay = (d, field, value, index, subs = []) => {\n\n    // Get the value of the field.\n    const val = _.get(doc, field);\n\n    return (\n      <li key={index}>\n        <span className=\"field\">\n          {field}\n        </span>: {(val instanceof Array || val instanceof Object ? '' : `\"${val}\"`)}\n        <div className=\"options\">\n          {\n            subs.length ?\n            (\n              <Tooltip title=\"Add Field\" placement=\"bottom\">\n                <i\n                  onClick={openCreateFieldModal.bind(this, field)}\n                  className=\"fas fa-plus icon\"\n                />\n              </Tooltip>\n            ) :\n            (\n              <Tooltip title=\"Edit\" placement=\"bottom\">\n                <i\n                  onClick={openEditFieldModal.bind(this, field)}\n                  className=\"fas fa-pencil-alt icon\"\n                />\n              </Tooltip>\n            )\n          }\n          <Popconfirm\n            title=\"Are you sure delete this field?\"\n            onConfirm={handleDeleteField.bind(this, field)}\n            onCancel={() => console.log('canceled')}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            placement=\"bottomRight\"\n          >\n            <Tooltip title=\"Delete\" placement=\"bottomRight\">\n              <i className=\"fas fa-trash icon\"></i>\n            </Tooltip>\n          </Popconfirm>\n        </div>\n\n\n        {subs.length ? (\n          <ul className=\"child\">\n            {subs}\n          </ul>\n        ) : ''}\n      </li>\n    )\n  }\n\n  // Watch connection, current table and database.\n  useEffect(() => {\n\n    // If rethink is connected, and databases have not been pulled.\n    if (props.rethink.connected === true) {\n      retrieveTableData();\n      setDoc(false);\n    }\n\n  // eslint-disable-next-line\n  }, [props.rethink.connected, table]);\n\n  // If loading, return a loader component.\n  if (loading) return (<Loader />);\n\n  /**\n   * Build the dataSource array, right now the only difference\n   * between this array, and the data array is this will\n   * add a key for each document (Needed for table)\n   */\n  const items = data.map((d, i) => {\n    return {\n      id: d.id,\n      key: i\n    }\n  });\n\n  const headers = data.length ? Object.keys(data[0]).map(d => d) : {};\n\n  return (\n    <>\n      <div className=\"database-table__container\">\n        <div className=\"items\">\n          <div className=\"title\">\n            <i className=\"fas fa-table\"></i>&nbsp;&nbsp;{table}\n            <div className=\"options\">\n              <Tooltip title=\"Import File\">\n                <i className=\"fas fa-file-import icon\"></i>\n              </Tooltip>\n\n              <Tooltip title=\"Export Table\">\n                <i onClick={() => filer.export('json', headers, data, table)} className=\"fas fa-file-export icon\"></i>\n              </Tooltip>\n\n              <Popconfirm\n                title=\"Are you sure delete this table?\"\n                onConfirm={handleDeleteTable.bind(this, table)}\n                onCancel={() => console.log('canceled')}\n                okText=\"Yes\"\n                cancelText=\"No\"\n                placement=\"bottomRight\"\n              >\n                <Tooltip title=\"Delete Table\">\n                  <i className=\"fas fa-trash icon\"></i>\n                </Tooltip>\n              </Popconfirm>\n            </div>\n          </div>\n          <div className=\"add\" onClick={openCreateDocumentModal.bind(this)}>\n            <i className=\"fas fa-plus-circle\"></i>&nbsp;&nbsp; Add Document\n          </div>\n          <ul>\n            {items.map((item, i) => {\n              let active = false;\n              if (doc !== false)\n                if (doc.id === item.id) active = true;\n\n              return (\n                <li key={i} className={active ? 'selected' : ''} onClick={selectDocument.bind(this, i)}>\n                  {item.id}\n                  <i className=\"fas fa-angle-right icon\"></i>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n        <div className=\"information\">\n          {\n            doc && (\n              <>\n                <div className=\"title\">\n                  <i className=\"fas fa-align-justify\"></i>&nbsp;&nbsp; {doc.id}\n                  <div className=\"options\">\n                    <Popconfirm\n                      title=\"Are you sure delete this document?\"\n                      onConfirm={handleDeleteDocument.bind(this)}\n                      onCancel={() => console.log('canceled')}\n                      okText=\"Yes\"\n                      cancelText=\"No\"\n                      placement=\"bottomRight\"\n                    >\n                      <Tooltip title=\"Delete Document\" placement=\"bottomRight\">\n                        <i className=\"fas fa-trash icon\"></i>\n                      </Tooltip>\n                    </Popconfirm>\n                  </div>\n                </div>\n                <div className=\"add\" onClick={openCreateFieldModal.bind(this)}>\n                  <i className=\"fas fa-plus-circle\"></i>&nbsp;&nbsp; Add Field\n                </div>\n                <ul>\n                  {/** Outputting the document fields and values **/}\n\n                  {iterate(doc)}\n                </ul>\n              </>\n            )\n          }\n        </div>\n      </div>\n\n      {/** Modal for creating a document. **/}\n      <Modal\n        title=\"Create Document\"\n        visible={createDocumentVisible}\n        onOk={handleCreateDocument.bind(this)}\n        onCancel={closeCreateDocumentModal.bind(this)}\n      >\n        <Row>\n          <Col span={24} className=\"modal-row\">\n            <Input\n              addonBefore=\"ID\"\n              value={createDocumentData.id}\n              onChange={e => updateCreateDocumentData('id', e.target.value)}\n              placeholder=\"Document ID (Leave blank to generate)\"\n              style={{marginBottom: 15}}\n            />\n          </Col>\n        </Row>\n\n        {\n          createDocumentData.fields.map((field, i) => {\n            return (\n              <Row>\n                <Col span={11} className=\"modal-row\">\n                  <Input\n                    addonBefore=\"Field\"\n                    value={field.field}\n                    onChange={e => updateCreateDocumentFieldName(i, e.target.value)}\n                    placeholder=\"Field\"\n                    style={{marginBottom: 15}}\n                  />\n                </Col>\n                <Col span={11} className=\"modal-row\">\n                  <Input\n                    addonBefore=\"Value\"\n                    value={field.value}\n                    onChange={e => updateCreateDocumentData(i, e.target.value)}\n                    placeholder=\"Value\"\n                    style={{marginBottom: 15}}\n                  />\n                </Col>\n                <Col span={2} style={{padding: 5, textAlign: 'right'}}>\n                  <i\n                    style={{cursor: 'pointer'}}\n                    onClick={removeCreateDocumentDataField.bind(this, i)}\n                    className=\"fas fa-trash icon\"\n                  />\n                </Col>\n              </Row>\n            )\n          })\n        }\n        <Row>\n          <Col span={24} className=\"modal-row\">\n            <span className=\"add-row\" onClick={addCreateDocumentDataField.bind(this)}>Add Field</span>\n          </Col>\n        </Row>\n      </Modal>\n\n      {/** Modal for adding a field. **/}\n      <Modal\n        title=\"Add Field\"\n        visible={createFieldVisible}\n        onOk={handleAddField.bind(this)}\n        onCancel={closeCreateFieldModal.bind(this)}\n      >\n        <Row>\n          <Col span={24} className=\"modal-row\">\n          <Select style={{width: '100%'}} defaultValue={createFieldData.type} onChange={val => updateCreateFieldData('type', val)}>\n            <Option value=\"field\">Field</Option>\n            <Option value=\"collection\">Collection</Option>\n          </Select>\n          </Col>\n          <hr />\n        </Row>\n        {\n          createFieldData.type === 'collection' ?\n          (\n            <Row>\n              <Col span={24} className=\"modal-row\">\n                <Input\n                  addonBefore=\"Collection Name\"\n                  value={createFieldData.collection}\n                  onChange={e => updateCreateFieldData('collection', e.target.value)}\n                  placeholder=\"Collection\"\n                  style={{marginBottom: 15}}\n                />\n              </Col>\n            </Row>\n          ) : null\n        }\n        {\n          createFieldData.fields.map((field, i) => {\n            return (\n              <Row>\n                <Col span={(createFieldData.type === 'collection' ? 11 : 12)} className=\"modal-row\">\n                  <Input\n                    addonBefore={(createFieldData.path ? (<span>{createFieldData.path}.{(createFieldData.collection ? `${createFieldData.collection}.` : '')}`</span>) : 'Field')}\n                    value={field.field}\n                    onChange={e => updateCreateFieldFieldName(i, e.target.value)}\n                    placeholder=\"Field\"\n                    style={{marginBottom: 15}}\n                  />\n                </Col>\n                <Col span={(createFieldData.type === 'collection' ? 11 : 12)} className=\"modal-row\">\n                  <Input\n                    addonBefore=\"Value\"\n                    value={field.value}\n                    onChange={e => updateCreateFieldData(i, e.target.value)}\n                    placeholder=\"Value\"\n                    style={{marginBottom: 15}}\n                  />\n                </Col>\n                {\n                  createFieldData.type === 'collection' ?\n                  (\n                    <Col span={2} style={{padding: 5, textAlign: 'right'}}>\n                      <i\n                        style={{cursor: 'pointer'}}\n                        onClick={removeCreateFieldDataField.bind(this, i)}\n                        className=\"fas fa-trash icon\"\n                      />\n                    </Col>\n                  ) : null\n                }\n              </Row>\n            )\n          })\n        }\n        {\n          createFieldData.type === 'collection' ?\n          (\n            <Row>\n              <Col span={24} className=\"modal-row\">\n                <span className=\"add-row\" onClick={addCreateFieldDataField.bind(this)}>Add Field</span>\n              </Col>\n            </Row>\n          ) : null\n        }\n      </Modal>\n\n      {/** Modal for editing a field. **/}\n      <Modal\n        title=\"Edit Field\"\n        visible={editFieldVisible}\n        onOk={handleEditField.bind(this)}\n        onCancel={closeEditFieldModal.bind(this)}\n      >\n        <Row>\n          <Col span={12} className=\"modal-row\">\n            <Input\n              addonBefore=\"Field\"\n              value={editFieldData.field}\n              onChange={e => updateEditFieldData('field', e.target.value)}\n              placeholder=\"Field\"\n              style={{marginBottom: 15}}\n            />\n          </Col>\n          <Col span={12} className=\"modal-row\">\n            <Input\n              addonBefore=\"Value\"\n              value={editFieldData.value}\n              onChange={e => updateEditFieldData('value', e.target.value)}\n              placeholder=\"Value\"\n              style={{marginBottom: 15}}\n            />\n          </Col>\n        </Row>\n      </Modal>\n    </>\n  );\n}\n\nexport default subscribe()(DatabaseTable);\n","import React from 'react';\n\nimport Home from './screens/home';\nimport Table from './screens/table';\n\nconst routes = {\n  '/': () => <Home />,\n  '/database/:database/table/:table': ({database, table}) => <Table database={database} table={table} />\n};\nexport default routes;\n","import rClient, { rethinkdb as r } from 'rethinkdb-websocket-client';\n\nconst _proto = {\n\n  // Websocket Server Configuration\n  path: '/rethink',\n  secure: false,\n\n  // Class configuration\n  delayedReconnection: 0, // Seconds\n  reconnectOnDisconnect: true,\n\n\n  // RethinkDB\n  client: false,\n  connection: false,\n  error: false,\n  connected: false,\n\n  // Custom Events\n  events: {},\n\n  /**\n   * Initializes a connection to a\n   * rethinkdb-websocket-server.\n   */\n  async initialize (configuration = {}) {\n\n    /**\n     * @TODO\n     *\n     * Add user authentication logic in this websocket connection.\n     * We don't want the ability to just hop right in to this client\n     * with out some type of authentication unless it's an option\n     * set by the admin/developer.\n     */\n\n    /**\n     * Class configuration variable checks\n     */\n\n    if (configuration.delayedReconnection !== undefined)\n      this.delayedReconnection   = configuration.delayedReconnection;\n\n    if (configuration.reconnectOnDisconnect !== undefined)\n      this.reconnectOnDisconnect = configuration.reconnectOnDisconnect;\n\n\n    const locationParts = window.location.host.split(\":\");\n    let host = locationParts[0];\n    let port = process.env.REACT_APP_SERVER_PORT || locationParts[1] || 80;\n\n    /**\n     * Build the configuration object\n     */\n    const config = {\n      host:   host,\n      port:   port,\n      path:   this.path,\n      secure: this.secure\n    };\n\n    // Attempt to connect\n    const connection = await this.connect(config);\n    if (!connection) return false;\n\n    // Set the class variables\n    this.client = r;\n    this.connection = connection;\n    this.connected = true;\n\n    // Setup connection events\n    this.useEvents();\n\n    return {\n      client: this.client,\n      connection: this.connection,\n      error: this.error,\n      connected: this.connected\n    };\n  },\n\n  /**\n   * The actual connection is made here and\n   * returned.\n   */\n  async connect (config) {\n    try {\n      const connection = await rClient.connect({\n        host: config.host,\n        port: config.port,\n        path: config.path,\n        secure: config.secure\n      });\n\n      console.log('RethinkDB Connected');\n\n      return connection;\n    } catch (error) {\n      console.log(error);\n      this.error = error;\n    }\n\n    return false;\n  },\n\n  /**\n   * Attempts a reconnect to the websocket-server if\n   * the connection is dropped after the specifed amount\n   * of seconds in the configuration.\n   */\n  reconnect () {\n    const self = this;\n    const delaySeconds = (this.delayedReconnection * 1000);\n    console.log(`Reconnecting in ${delaySeconds} seconds.`);\n\n    setTimeout(() => {\n\n      // Run custom onReconnecting event\n      if (typeof self.events.onReconnecting === 'function')\n        self.events.onReconnecting();\n\n      self.initialize();\n    }, delaySeconds);\n  },\n\n  /**\n   * Set custom events\n   */\n  setEvents (events) {\n    const self = this;\n\n    if (events.onClose) this.events.onClose = events.onClose;\n  },\n\n  /**\n   * Activates events for the connection.\n   */\n  useEvents () {\n    const self = this;\n\n    this.connection.on('open', () => {\n      console.log('Rethink WebSocket Open');\n\n      // Run custom onOpen event\n      if (typeof self.events.onOpen === 'function') self.events.onOpen();\n    })\n\n    this.connection.on('error', (error) => {\n      console.log('Rethink Websocket Error: ', error);\n      if (this.reconnectOnDisconnect) self.reconnect();\n    })\n\n    this.connection.on('close', () => {\n      console.log('RethinkDB disconnected.');\n      if (this.reconnectOnDisconnect) self.reconnect();\n\n      // Run custom onClose event\n      if (typeof self.events.onClose === 'function') self.events.onClose();\n    });\n  }\n\n};\n\nexport default Object.create(_proto);\n","import React, { useEffect } from 'react';\nimport { useRoutes } from 'hookrouter';\nimport { subscribe } from 'react-contextual';\n\nimport Layout from './layout';\nimport routes from './routes';\n\nimport rethinkdb from './shared/libs/rethinkdb';\n\nconst App = props => {\n  const route = useRoutes(routes);\n\n  /**\n   * Attempts to initialize the rethinkdb\n   * connection and sets it to the global state.\n   */\n  const startRethink = async () => {\n    const res = await rethinkdb.initialize();\n    console.log(res);\n    if (res.connected === true) props.setRethink(res);\n  }\n\n  /**\n   * Attempt the rethinkdb connection on mount.\n   */\n  useEffect(() => {\n    startRethink();\n  }, []);\n\n  return (<Layout>{route}</Layout>);\n}\n\nexport default subscribe()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import rClient, { rethinkdb as r } from 'rethinkdb-websocket-client';\n\nexport const setTitle = title => state => {\n  return { title };\n}\n\n/**\n * Set forceReloadKey to a random number.\n * This helps when the navigation needs to re-pull databases\n * and tables.\n */\nexport const forceReload = () => state => {\n  let key = Math.floor((Math.random() * 10000) + 1);\n  return { forceReloadKey: key };\n}\n\n/**\n * Sets the rethinkdb client to the global state for all\n * subscribed components to use.\n */\nexport const setRethink = rethink => state => {\n  return { rethink };\n}\n","import * as actions from './actions';\n\nexport default {\n  title: 'ReQL Admin',\n\n  rethink: {\n    client: false,\n    connected: false,\n    error: false\n  },\n\n  forceReloadKey: 0,\n\n  ...actions\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-contextual';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\nimport store from './shared/store';\n\nReactDOM.render(\n  <Provider {...store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}